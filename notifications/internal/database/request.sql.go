// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: request.sql

package database

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const dequeRequests = `-- name: DequeRequests :many
SELECT request_by, request_to, connection_id FROM connections WHERE status_sent=FALSE AND sent_attempts<3 ORDER BY created_at DESC
`

type DequeRequestsRow struct {
	RequestBy    string
	RequestTo    string
	ConnectionID uuid.UUID
}

func (q *Queries) DequeRequests(ctx context.Context) ([]DequeRequestsRow, error) {
	rows, err := q.db.QueryContext(ctx, dequeRequests)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []DequeRequestsRow
	for rows.Next() {
		var i DequeRequestsRow
		if err := rows.Scan(&i.RequestBy, &i.RequestTo, &i.ConnectionID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const mailSent = `-- name: MailSent :exec
UPDATE connections 
SET sent_attempts = sent_attempts +1 , status_sent=TRUE
WHERE connection_id=$1
`

func (q *Queries) MailSent(ctx context.Context, connectionID uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, mailSent, connectionID)
	return err
}

const mailnotSent = `-- name: MailnotSent :one
UPDATE connections 
SET sent_attempts = sent_attempts +1 
WHERE connection_id=$1 RETURNING sent_attempts,status_sent
`

type MailnotSentRow struct {
	SentAttempts sql.NullInt32
	StatusSent   bool
}

func (q *Queries) MailnotSent(ctx context.Context, connectionID uuid.UUID) (MailnotSentRow, error) {
	row := q.db.QueryRowContext(ctx, mailnotSent, connectionID)
	var i MailnotSentRow
	err := row.Scan(&i.SentAttempts, &i.StatusSent)
	return i, err
}
