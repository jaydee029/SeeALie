// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: apikey.sql

package database

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createApiKey = `-- name: CreateApiKey :one
INSERT INTO apikey(id) VALUES($1)
RETURNING id, api_key
`

func (q *Queries) CreateApiKey(ctx context.Context, id uuid.UUID) (Apikey, error) {
	row := q.db.QueryRowContext(ctx, createApiKey, id)
	var i Apikey
	err := row.Scan(&i.ID, &i.ApiKey)
	return i, err
}

const verifyApiKey = `-- name: VerifyApiKey :one
SELECT id, username
FROM users
WHERE EXISTS (SELECT 1 FROM apikey WHERE id = users.id AND api_key = $1)
`

type VerifyApiKeyRow struct {
	ID       uuid.UUID
	Username string
}

func (q *Queries) VerifyApiKey(ctx context.Context, apiKey sql.NullString) (VerifyApiKeyRow, error) {
	row := q.db.QueryRowContext(ctx, verifyApiKey, apiKey)
	var i VerifyApiKeyRow
	err := row.Scan(&i.ID, &i.Username)
	return i, err
}
