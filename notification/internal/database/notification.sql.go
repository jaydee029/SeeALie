// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: notification.sql

package database

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const dequeNotifications = `-- name: DequeNotifications :many
SELECT request_by, request_to, request_status FROM notifications WHERE status_sent=PENDING AND sent_attempts<3 ORDER BY created_at DESC
`

type DequeNotificationsRow struct {
	RequestBy     string
	RequestTo     string
	RequestStatus string
}

func (q *Queries) DequeNotifications(ctx context.Context) ([]DequeNotificationsRow, error) {
	rows, err := q.db.QueryContext(ctx, dequeNotifications)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []DequeNotificationsRow
	for rows.Next() {
		var i DequeNotificationsRow
		if err := rows.Scan(&i.RequestBy, &i.RequestTo, &i.RequestStatus); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const notificationSent = `-- name: NotificationSent :exec
UPDATE connections 
SET sent_attempts = sent_attempts +1 , status_sent="SENT"
WHERE connection_id=$1
`

func (q *Queries) NotificationSent(ctx context.Context, connectionID uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, notificationSent, connectionID)
	return err
}

const notificationnotSent = `-- name: NotificationnotSent :one
UPDATE connections 
SET sent_attempts = sent_attempts +1 
WHERE connection_id=$1 RETURNING sent_attempts,status_sent
`

type NotificationnotSentRow struct {
	SentAttempts sql.NullInt32
	StatusSent   string
}

func (q *Queries) NotificationnotSent(ctx context.Context, connectionID uuid.UUID) (NotificationnotSentRow, error) {
	row := q.db.QueryRowContext(ctx, notificationnotSent, connectionID)
	var i NotificationnotSentRow
	err := row.Scan(&i.SentAttempts, &i.StatusSent)
	return i, err
}
